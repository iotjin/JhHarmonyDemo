import { BaseNavigation, KColors } from 'JhCommon'
import data from '../../res/wx_contacts.json'
import { pinyin } from 'pinyin-pro';
import { util } from '@kit.ArkTS'


@Entry
@Preview
@Component
export struct ListGroupTest2Page {
  @State dataArr: ESObject[] = []
  private value: string[] = ['üîç', '‚òÖ', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
    'H', 'I', 'J', 'K', 'L', 'M', 'N',
    'O', 'P', 'Q', 'R', 'S', 'T', 'U',
    'V', 'W', 'X', 'Y', 'Z', '#']
  scroller: Scroller = new Scroller()

  aboutToAppear() {
    this.dataArr = this.loadData()
    // console.log('data', JSON.stringify(this.dataArr))

    const pyStr = pinyin('Ê±âËØ≠ÊãºÈü≥1', { toneType: 'none' })
    console.log('Ê±âÂ≠óËΩ¨ÊãºÈü≥Ôºö', `Ê±âËØ≠ÊãºÈü≥1 to ${pyStr}`)
  }

  build() {
    Column() {
      BaseNavigation({
        title: 'ListGroup2 - ÈÄöËÆØÂΩï'
      })
      Scroll() {
        Column() {
          this.body()
        }
        .backgroundColor(KColors.wxBgColor)
      }
      .layoutWeight(1)
    }
  }

  @Builder
  body() {
    Row() {
      List({ space: 0, initialIndex: 0, scroller: this.scroller }) { //Âä†ËΩΩÂàóË°®
        ForEach(this.dataArr, (item: ESObject, index) => {
          ListItem() {
            Column() {
              if (index == 0 || this.dataArr[index-1].tagIndex != item.tagIndex) {
                Text(item.tagIndex)
                  .width('100%')
                  .fontColor('#333333')
                  .fontSize(14)
                  .backgroundColor(Color.Orange)
                  .padding({
                    top: 5, bottom: 5, left: 15
                  })
              }

              Text(item.name)
                .fontSize(30)
                .padding({
                  top: 15, bottom: 15, left: 15
                })
            }.alignItems(HorizontalAlign.Start)
          }
        }, (item: ESObject) => util.generateRandomUUID(true)) //keyÈöèÊú∫ÁîüÊàê
      }
      .layoutWeight(1)
      .scrollBar(BarState.Off)
      .height('100%')
      .divider({
        color: '#E5E5E5',
        strokeWidth: 0.5
      })
      .sticky(StickyStyle.Header | StickyStyle.Footer)

      AlphabetIndexer({ arrayValue: this.value, selected: 0 })
        .selectedColor(0xFFFFFF)// ÈÄâ‰∏≠È°πÊñáÊú¨È¢úËâ≤
        .popupColor(0xFFFAF0)// ÂºπÂá∫Ê°ÜÊñáÊú¨È¢úËâ≤
        .selectedBackgroundColor(0xCCCCCC)// ÈÄâ‰∏≠È°πËÉåÊôØÈ¢úËâ≤
        .popupBackground(0xD2B48C)// ÂºπÂá∫Ê°ÜËÉåÊôØÈ¢úËâ≤
        .usingPopup(false)// ÊòØÂê¶ÊòæÁ§∫ÂºπÂá∫Ê°Ü
        .selectedFont({ size: 16, weight: FontWeight.Bolder })// ÈÄâ‰∏≠È°πÂ≠ó‰ΩìÊ†∑Âºè
        .popupFont({ size: 30, weight: FontWeight.Bolder })// ÂºπÂá∫Ê°ÜÂÜÖÂÆπÁöÑÂ≠ó‰ΩìÊ†∑Âºè
        .itemSize(22)// ÊØè‰∏ÄÈ°πÁöÑÂ∞∫ÂØ∏Â§ßÂ∞è
        .alignStyle(IndexerAlign.Left)//ÂºπÂá∫Ê°ÜÂú®Á¥¢ÂºïÊù°Âè≥‰æßÂºπÂá∫
        .onSelect((index: number) => {
          console.info(this.value[index] + ' Selected!')
          this.onSelectIndexItem(this.value[index]);
        })
    }

  }

  onSelectIndexItem(index: string) {
    for (let i = 0; i < this.dataArr.length; i++) {
      console.log("ÂêçÂ≠óÔºö" + this.dataArr[i].name + " index1:" + this.dataArr[i].tagIndex + " index2:" + index)
      if (this.dataArr[i].tagIndex == index) {
        this.scroller.scrollToIndex(i) //ÊªöÂä®Âà∞Á¥¢Âºï‰ΩçÁΩÆ
        break;
      }
    }
  }

  clickCell(item: ESObject) {
    console.log('item', JSON.stringify(item))
  }

  loadData() {
    // ÂéüÂßãÊï∞ÊçÆ
    const dataArr: ESObject[] = this.getData()

    // Â§ÑÁêÜÊï∞ÊçÆ
    let tempList: ESObject[] = [];
    for (let i = 0; i < dataArr.length; i++) {
      const item: ESObject = dataArr[i]
      const pinyinStr = pinyin(item.name, { toneType: 'none' })
      const tag = pinyinStr.substring(0, 1).toUpperCase();
      item.namePinyin = pinyinStr;
      if (item.isStar == true) {
        item.tagIndex = '‚òÖ';
      } else if (new RegExp('[A-Z]').test(tag)) {
        item.tagIndex = tag;
      } else {
        item.tagIndex = '#';
      }
      tempList.push(item);
    }

    // Ê†πÊçÆA-ZÊéíÂ∫è
    tempList.sort((a: ESObject, b: ESObject) => {
      if (a['tagIndex'] === b['tagIndex']) {
        return a['name'].localeCompare(b['name']) as number
      }
      if (a['tagIndex'] === "#") {
        return 1
      }
      if (b['tagIndex'] === "#") {
        return -1
      }
      return a['tagIndex'].localeCompare(b['tagIndex']) as number
    });

    // ÊääÊòüÊ†áÁßªÂà∞ÊúÄÂâç
    tempList.forEach((item: ESObject, index) => {
      if (item.isStar == true) {
        tempList.unshift(...tempList.splice(index, 1));
      }
    });

    // Ê∑ªÂä† header
    tempList.unshift({
      name: "header",
      tagIndex: "üîç"
    });

    console.log('tempList', JSON.stringify(tempList))
    return tempList
  }

  getData() {
    let dataArr: ESObject[] = data['data']
    return dataArr;
  }
}